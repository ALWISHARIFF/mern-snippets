{
    "Middleware Helmet": {
        "prefix": "app.helmet",
        "body": "app.use(helmet());$0",
        "description": "Security level middleware"
    },
    "Middleware Morgan": {
        "prefix": "app.logger",
        "body": "app.use(logger());$0",
        "description": "Initializing the logger/morgan middleware"
    },
    "Middleware Compression": {
        "prefix": "app.compress",
        "body": "app.use(compression({level:zlib.Z_DEFAULT_COMPRESSION}));$0",
        "description": "Compression Middleware"
    },
    "Middleware Body Parser Json": {
        "prefix": "express.json",
        "body": "app.use(express.json());$0",
        "description": "For parsing application/json"
    },
    "Middleware Body Parser Url Encoded": {
        "prefix": "express.url",
        "body": "app.use(express.urlencoded({extended: true}));$0",
        "description": "For parsing application/x-www-form-urlencoded"
    },
    "Middleware Method Override": {
        "prefix": "app.method-override",
        "body": "app.use(methodOverride('_method'));$0",
        "description": "MethodOverride: override with POST having ?_method=DELETE"
    },
    "Middleware Static File": {
        "prefix": "app.static-file",
        "body": "app.use(express.static(__dirname + '/public'));$0",
        "description": "Static file middleware"
    },
    "Middleware for uncaught exceptions": {
        "prefix": "uncaughtException",
        "body": [
            "process.on('uncaughtException', (err) => {",
            "    console.log('UNCAUGHT EXCEPTION! Shutting down...');",
            "    console.log(err.name, err.message);",
            "    process.exit(1); //1 stands for uncaught exception",
            "  });"
        ],
        "description": "for uncaught exceptions like x is not defined; used for synchronous code in NodeJS"
    },
    "Middleware forunhandled promises in NodeJS": {
        "prefix": "unhandledRejection",
        "body": [
            " //process is an instance of EventEmitter and will handle all unhandled promises in NodeJS",
            " //this is used for asynchronous code; Promises",
            "process.on('unhandledRejection', (err) => {",
            "    console.log(err.name, err.message);",
            "    console.log('UNHANDLED REJECTION! Shutting down...');",
            "    server.close(() => {",
            "      process.exit(1); //1 stands for uncaught exception",
            "               });",
            "  });"
        ],
        "description": "//process is an instance of EventEmitter and will handle all unhandled promises in NodeJS this is used for asynchronous code; Promises"
    }
}