{
    "App Disable": {
        "prefix": "app.disable",
        "body": [
            "app.disable('${1}');"
        ],
        "description": "Sets the Boolean setting name to false, where name is one of the properties from the app settings table. Calling app.set('foo', false) for a Boolean property is the same as calling app.disable('foo')."
    },
    "App Disabled": {
        "prefix": "app.disabled",
        "body": [
            "app.disabled('${1}');"
        ],
        "description": "Sets the Boolean setting name to false, where name is one of the properties from the app settings table."
    },
    "App Enable": {
        "prefix": "app.enable",
        "body": [
            "app.enable('${1}');"
        ],
        "description": "Sets the Boolean setting name to true, where name is one of the properties from the app settings table."
    },
    "App Enabled": {
        "prefix": "app.enabled",
        "body": [
            "app.enabled('${1}');"
        ],
        "description": "Returns true if the setting name is enabled (true), where name is one of the properties from the app settings table."
    },
    "App Param": {
        "prefix": "app.param",
        "body": [
            "app.param('${1}', (${2:req, res, next, id}) => {\n\t$3\n});"
        ],
        "description": "Add callback triggers to route parameters, where name is the name of the parameter or an array of them, and callback is the callback function. The parameters of the callback function are the request object, the response object, the next middleware, the value of the parameter and the name of the parameter, in that order."
    },
    "App Path": {
        "prefix": "app.path",
        "body": "app.path();$0",
        "description": "Returns the canonical path of the app, a string."
    },
    "App Render": {
        "prefix": "app.render",
        "body": [
            "app.render('${1}', (${2:err}) => {\n\t$3\n});"
        ],
        "description": "Returns the rendered HTML of a view via the callback function. It accepts an optional parameter that is an object containing local variables for the view."
    },
    "App Set": {
        "prefix": "app.set",
        "body": [
            "app.set('${1:name}', '${2:value}');"
        ],
        "description": "Assigns setting name to value, where name is one of the properties from the app settings table."
    },
    "App Listen": {
        "prefix": "app.listen",
        "body": [
            "app.listen(${1:3000}, ($2) => {\n\t${3:console.log('App listening on port 3000!')};\n});"
        ],
        "description": "Binds and listens for connections on the specified host and port. This method is identical to Node's http.Server.listen()."
    },
    "App Listen With Callback": {
        "prefix": "app.listen.with.callback",
        "body": [
            "app.listen(${1:port}, () => {",
            "\tconsole.log('Server started on ${1:port}');",
            "});"
        ],
        "description": "Starts a UNIX socket and listens for connections on the given path. This method is identical to Node’s http.Server.listen()"
    },
    "App Use": {
        "prefix": "app.use",
        "body": [
            "app.use(${1})"
        ],
        "description": "Mounts the specified middleware function or functions at the specified path. If path is not specified, it defaults to “/”."
    },
    "app engine": {
        "prefix": "app.engine",
        "body": [
            "app.engine('${1}', ${2});"
        ],
        "description": "Registers the given template engine callback as ext."
    },
    "ejx engine": {
        "prefix": "ejs.engine",
        "body": [
            "app.set(\"view engine\", \"ejs\");",
            "app.set(\"views\", path.join(__dirname, \"views\"));"
        ],
        "description": " ejx engen."
    },
    "hbs engine": {
        "prefix": "hbs.engine",
        "body": [
            "app.set(\"view engine\", \"hbs\"); ",
            "app.engine('.hbs',{",
            " defaultLayout: '',",
            " extname: '.hbs',",
            "  })"
        ],
        "description": " hbs engen."
    }
}